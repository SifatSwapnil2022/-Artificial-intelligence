# -*- coding: utf-8 -*-
"""vacuumSimpleReflex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tlWseoeMGYyqsupebHroInrfWPGwlEqK
"""

import random

class Environment(object):
    def __init__(self):
        self.locationCondition = {'A': '0', 'B': '0'}
        self.locationCondition['A'] = random.randint(0, 1)
        self.locationCondition['B'] = random.randint(0, 1)

class SimpleReflexVacuumAgent(Environment):
    def __init__(self, Environment):
        print (Environment.locationCondition)
        Score = 0
        vacuumLocation = random.randint(0, 1)
        if vacuumLocation == 0:
            print ("Vacuum is randomly placed at Location A.")
            print ("Location A is Dirty.") if Environment.locationCondition['A'] == 1 else print("Location A is Clean.")
            if Environment.locationCondition['A'] == 1:
                Environment.locationCondition['A'] = 0
                Score += 1
                print ("Location A has been Cleaned.")
            print ("Moving to Location B...")
            print ("Location B is Dirty.") if Environment.locationCondition['B'] == 1 else print("Location B is Clean.")
            if Environment.locationCondition['B'] == 1:
                Environment.locationCondition['B'] = 0;
                Score += 1
                print ("Location B has been Cleaned.")
            print("Environment is Clean.")

        elif vacuumLocation == 1:
            print ("Vacuum randomly placed at Location B.")
            print ("Location B is Dirty.") if Environment.locationCondition['B'] == 1 else print("Location B is Clean.")
            if Environment.locationCondition['B'] == 1:
                Environment.locationCondition['B'] = 0
                Score += 1
                print ("Location B has been Cleaned.")
            print ("Moving to Location A...")
            print ("Location A is Dirty.") if Environment.locationCondition['A'] == 1 else print("Location A is Clean.")
            if Environment.locationCondition['A'] == 1:
                Environment.locationCondition['A'] = 0;
                Score += 1
                print ("Location A has been Cleaned.")
            print("Environment is Clean.")

        print (Environment.locationCondition)
        print ("Performance Measurement: " + str(Score))


theEnvironment = Environment()
theVacuum = SimpleReflexVacuumAgent(theEnvironment)

"""**Second Code with more user friendly:**"""

class Environment2(object):
  def __init__(self):
    # These are pre-defined knowledge for my agent
    self.goalState = {'A' : '0' , 'B' : '0' , 'C' : '0'}
    self.roomStates = {'A' : '0' , 'B' : '0' , 'C' : '0'}

class SimpleReflexAgentVaccum(Environment2):
  def __init__(self, Environment2):
    action = 0       # 0 = Clean , 1 = Dirty
    cost = 0
    #initial input
    print ("Enter the starting location of vacuum (A/B/C) = ")
    location = input()
    print()

    for room in Environment2.roomStates:
      action = input("Enter the state of " + room + " (0 for clean /1 for dirty): ")
      Environment2.roomStates[room] = action

    #General Outputs

    print()
    print("\nCurrent State: " + str(Environment2.roomStates))
    print("\nGoal state: " + str(Environment2.goalState))

    print("\n Vacuum is placed in location " + location)

    if (Environment2.roomStates != Environment2.goalState) :

        #If the starting location is room A
        if (location == 'A'):
            if (Environment2.roomStates['A'] == '1'): #if dirty
                Environment2.roomStates['A'] = '0'
                cost+=1
                print("location A was dirty\nlocation A has been cleaned\nCost for cleaning is 1.")

            if (Environment2.roomStates == Environment2.goalState):
                print("Goal state has been met.")
                print("\nPerformance Measurement: " + str(cost))

            #If A is clean. Going from A -> B
            else:
                print("\nA is clean")
                print("\nA -> B")
                print("\nCost for moving within rooms = 1")
                cost+=1

                if (Environment2.roomStates['B'] == '1'):#If B is dirty
                    Environment2.roomStates['B'] = '0'
                    cost+=1
                    print("location B was dirty\nlocation B has been cleaned\nCost for cleaning is 1.")

                if (Environment2.roomStates == Environment2.goalState):
                    print("Goal state has been met.")
                    print("\nPerformance Measurement: " + str(cost))

                #As goal state wasn't met, this means that room C is dirty
                else:
                    print("\nA and B are clean but C is dirty")
                    print("\nB -> C")
                    print("\nCost for moving within rooms = 1")
                    cost+=1

                    Environment2.roomStates['C'] = '0'
                    cost+=1
                    print("location C was dirty\nlocation C has been cleaned\nCost for cleaning is 1.")

                    if (Environment2.roomStates == Environment2.goalState):
                        print("Goal state has been met.")
                        print("\nPerformance Measurement: " + str(cost))

        #If the starting location is room B
        elif (location == "B"):
            if(Environment2.roomStates['B'] == '1'): #B is dirty
                Environment2.roomStates['B'] = '0'
                cost+=1
                print("location B was dirty\nlocation B has been cleaned\nCost for cleaning is 1.")

            if (Environment2.roomStates == Environment2.goalState):
                print("Goal state has been met.")
                print("\nPerformance Measurement: " + str(cost))

            #If B is clean, then we will move to A first
            else:
                print("\nB is clean")
                print("\nB -> A")
                print("\nCost for moving within rooms = 1")
                cost+=1

                if(Environment2.roomStates['A'] == '1'): #A is dirty
                    Environment2.roomStates['A'] = '0'
                    cost+=1
                    print("location A was dirty\nlocation A has been cleaned\nCost for cleaning is 1.")

                    if (Environment2.roomStates == Environment2.goalState):
                        print("Goal state has been met.")
                        print("\nPerformance Measurement: " + str(cost))

                    # As goal state failed, it means that C is still dirty. We will now move from A->B and then B->C
                    else:
                        print("\nA is clean")
                        print("\nA -> B")
                        print("\nCost for moving within rooms = 1")
                        cost+=1

                        print("\nB is also clean")
                        print("\nB -> C")
                        print("\nCost for moving within rooms = 1")
                        cost+=1

                        Environment2.roomStates['C'] = '0'
                        cost+=1
                        print("location C was dirty\nlocation C has been cleaned\nCost for cleaning is 1.")

                        if (Environment2.roomStates == Environment2.goalState):
                            print("Goal state has been met.")
                            print("\nPerformance Measurement: " + str(cost))

                elif(Environment2.roomStates['C'] == '1'): #C is Dirty
                    Environment2.roomStates['C'] = '0'
                    cost+=1
                    print("location C was dirty\nlocation C has been cleaned\nCost for cleaning is 1.")

                    if (Environment2.roomStates == Environment2.goalState):
                        print("Goal state has been met.")
                        print("\nPerformance Measurement: " + str(cost))

                    # As goal state failed, it means that A is still dirty. We will now move from C->B and then B->A
                    else:
                        print("\nC is clean")
                        print("\nC -> B")
                        print("\nCost for moving within rooms = 1")
                        cost+=1

                        print("\nB is also clean")
                        print("\nB -> A")
                        print("\nCost for moving within rooms = 1")
                        cost+=1

                        Environment2.roomStates['A'] = '0'
                        cost+=1
                        print("location A was dirty\nlocation A has been cleaned\nCost for cleaning is 1.")

                        if (Environment2.roomStates == Environment2.goalState):
                            print("Goal state has been met.")
                            print("\nPerformance Measurement: " + str(cost))

        #If the starting location is room C
        elif(location == 'C'):
            if (Environment2.roomStates['C'] == '1'): #if dirty
                Environment2.roomStates['C'] = '0'
                cost+=1
                print("location C was dirty\nlocation C has been cleaned\nCost for cleaning is 1.")

            if (Environment2.roomStates == Environment2.goalState):
                print("Goal state has been met.")
                print("\nPerformance Measurement: " + str(cost))

            #If C is clean. Going from C -> B
            else:
                print("\nC is clean")
                print("\nC -> B")
                print("\nCost for moving within rooms = 1")
                cost+=1

                if (Environment2.roomStates['B'] == '1'):#If B is dirty
                    Environment2.roomStates['B'] = '0'
                    cost+=1
                    print("location B was dirty\nlocation B has been cleaned\nCost for cleaning is 1.")

                if (Environment2.roomStates == Environment2.goalState):
                    print("Goal state has been met.")
                    print("\nPerformance Measurement: " + str(cost))

                #As goal state wasn't met, this means that room A is dirty
                else:
                    print("\nB and C are clean but A is dirty")
                    print("\nB -> A")
                    print("\nCost for moving within rooms = 1")
                    cost+=1

                    Environment2.roomStates['A'] = '0'
                    cost+=1
                    print("location A was dirty\nlocation A has been cleaned\nCost for cleaning is 1.")

                    if (Environment2.roomStates == Environment2.goalState):
                        print("Goal state has been met.")
                        print("\nPerformance Measurement: " + str(cost))
        else:
            print("\nInvalid Start location")

    else:
        print("\nAll rooms are already clean")
        print("\nPerformance Measurement: " + str(cost))

newEnvironment = Environment2()

vaccumAgent = SimpleReflexAgentVaccum(newEnvironment)

