# -*- coding: utf-8 -*-
"""Genetic Algorithm for TSP .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t9kogf_wv2KpZKn57n4PtypC0OI4Qe6g
"""

import matplotlib.pyplot as plt

# Example data
generations = list(range(1, 101))  # 100 generations
fitness = [1000 / (gen + 1) for gen in generations]  # Example fitness values

plt.plot(generations, fitness)
plt.title('Fitness Over Generations')
plt.xlabel('Generation')
plt.ylabel('Fitness (1/Distance)')
plt.grid()
plt.show()

pip install matplotlib

import matplotlib.pyplot as plt

cities = {
    1: (0, 0),
    2: (1, 3),
    3: (4, 3),
    4: (6, 1),
    5: (3, 0)
}


chromosome = [1, 3, 4, 2, 5]

def get_tour_coordinates(cities, chromosome):
    x_coords = [cities[city][0] for city in chromosome]
    y_coords = [cities[city][1] for city in chromosome]
    # Close the tour by returning to the starting city
    x_coords.append(x_coords[0])
    y_coords.append(y_coords[0])
    return x_coords, y_coords

tour_x, tour_y = get_tour_coordinates(cities, chromosome)


def plot_tsp_tour(cities, tour_x, tour_y):
    plt.figure(figsize=(8, 6))
    plt.plot(tour_x, tour_y, marker='o', linestyle='-', color='blue', label='Tour Path')
    plt.title('Traveling Salesperson Problem (TSP) Tour Visualization', fontsize=14)
    plt.xlabel('X Coordinate', fontsize=12)
    plt.ylabel('Y Coordinate', fontsize=12)
    plt.grid(visible=True, linestyle='--', alpha=0.6)


    for city, (x, y) in cities.items():
        plt.annotate(f'City {city}', (x, y), textcoords="offset points", xytext=(0, 10), ha='center', fontsize=10)

    plt.legend()
    plt.xlim(min(tour_x) - 1, max(tour_x) + 1)
    plt.ylim(min(tour_y) - 1, max(tour_y) + 1)
    plt.show()
plot_tsp_tour(cities, tour_x, tour_y)

import plotly.graph_objects as go

# Extract tour coordinates
tour_x, tour_y = [cities[city][0] for city in chromosome], [cities[city][1] for city in chromosome]
tour_x.append(tour_x[0])  # Close the tour
tour_y.append(tour_y[0])

# Create the plot
fig = go.Figure()

# Add tour path
fig.add_trace(go.Scatter(
    x=tour_x, y=tour_y, mode='lines+markers',
    name='Tour Path', line=dict(color='blue', width=2), marker=dict(size=8)
))

# Annotate cities
for city, (x, y) in cities.items():
    fig.add_trace(go.Scatter(
        x=[x], y=[y], mode='text',
        text=[f'City {city}'], textposition='top center'
    ))

# Layout customization
fig.update_layout(
    title='Traveling Salesperson Problem (TSP) Tour Visualization',
    xaxis_title='X Coordinate',
    yaxis_title='Y Coordinate',
    template='plotly_white',
    width=800,
    height=600,
    showlegend=False
)

fig.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Set Seaborn style
sns.set(style="whitegrid", context="talk")

# Plot TSP tour
plt.figure(figsize=(8, 6))
sns.lineplot(x=tour_x, y=tour_y, marker="o", dashes=False, color="b", label="Tour Path")

# Annotate cities
for city, (x, y) in cities.items():
    plt.text(x, y + 0.1, f"City {city}", ha='center', fontsize=10)

plt.title("TSP Tour Visualization", fontsize=16)
plt.xlabel("X Coordinate")
plt.ylabel("Y Coordinate")
plt.legend()
plt.show()

plt.savefig('tsp_tour.png', dpi=300, bbox_inches='tight')

import networkx as nx

# Create graph
G = nx.Graph()
for city in cities:
    G.add_node(city, pos=cities[city])

# Add edges from chromosome
edges = [(chromosome[i], chromosome[i+1]) for i in range(len(chromosome) - 1)]
edges.append((chromosome[-1], chromosome[0]))  # Close the tour
G.add_edges_from(edges)

# Plot graph
pos = nx.get_node_attributes(G, 'pos')
nx.draw(G, pos, with_labels=True, node_size=500, node_color='lightblue', font_weight='bold')
plt.title("TSP Tour as Graph")
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Define city coordinates
cities = {
    1: (0, 0),   # City 1
    2: (1, 3),   # City 2
    3: (4, 3),   # City 3
    4: (6, 1),   # City 4
    5: (3, 0)    # City 5
}

# Chromosome representing the tour
chromosome = [1, 3, 4, 2, 5]

# Function to calculate the fitness (total distance of the tour)
def calculate_fitness(cities, chromosome):
    total_distance = 0
    for i in range(len(chromosome) - 1):
        city1, city2 = chromosome[i], chromosome[i + 1]
        dist = np.linalg.norm(np.array(cities[city1]) - np.array(cities[city2]))
        total_distance += dist
    # Add the distance to return to the starting city
    total_distance += np.linalg.norm(np.array(cities[chromosome[-1]]) - np.array(cities[chromosome[0]]))
    return total_distance

# Calculate fitness
fitness = calculate_fitness(cities, chromosome)

# Extract the tour coordinates
tour_x = [cities[city][0] for city in chromosome] + [cities[chromosome[0]][0]]
tour_y = [cities[city][1] for city in chromosome] + [cities[chromosome[0]][1]]

# Plot the tour
plt.figure(figsize=(8, 6))
plt.plot(tour_x, tour_y, marker='o', linestyle='-', color='blue', label=f'Tour (Distance: {fitness:.2f})')

# Annotate cities
for city, (x, y) in cities.items():
    plt.annotate(f'City {city}', (x, y), textcoords="offset points", xytext=(0, 10), ha='center')

# Add labels and title
plt.title('Traveling Salesman Problem (TSP) Tour Visualization', fontsize=14)
plt.xlabel('X Coordinate', fontsize=12)
plt.ylabel('Y Coordinate', fontsize=12)
plt.grid(visible=True, linestyle='--', alpha=0.6)
plt.legend()
plt.show()